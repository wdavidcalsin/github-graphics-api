[{"/run/media/wdavid/c3172838-fbb0-4a0a-8d10-7c4f09079164/practica/react/graphi1-charjs/src/App.tsx":"1","/run/media/wdavid/c3172838-fbb0-4a0a-8d10-7c4f09079164/practica/react/graphi1-charjs/src/service/github.service.ts":"2"},{"size":1224,"mtime":1610916768541,"results":"3","hashOfConfig":"4"},{"size":210,"mtime":1610922535334,"results":"5","hashOfConfig":"6"},{"filePath":"7","messages":"8","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"171p9cs",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i84jab","/run/media/wdavid/c3172838-fbb0-4a0a-8d10-7c4f09079164/practica/react/graphi1-charjs/src/App.tsx",["11","12","13"],"/run/media/wdavid/c3172838-fbb0-4a0a-8d10-7c4f09079164/practica/react/graphi1-charjs/src/service/github.service.ts",[],{"ruleId":"14","severity":1,"message":"15","line":21,"column":5,"nodeType":"16","messageId":"17","endLine":21,"endColumn":30},{"ruleId":"18","severity":1,"message":"19","line":22,"column":20,"nodeType":"20","messageId":"21","endLine":22,"endColumn":23,"suggestions":"22"},{"ruleId":"14","severity":1,"message":"15","line":26,"column":5,"nodeType":"16","messageId":"17","endLine":26,"endColumn":13},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["23","24"],{"messageId":"25","fix":"26","desc":"27"},{"messageId":"28","fix":"29","desc":"30"},"suggestUnknown",{"range":"31","text":"32"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"31","text":"33"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[670,673],"unknown","never"]